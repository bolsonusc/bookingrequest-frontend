import React from 'react';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { useAuth } from '../../src/hooks/useAuth';
import { generateUsername } from 'unique-username-generator';

const Onboarding = () => {
  const router = useRouter();
  const { user, loading, session, updateUserMetadata } = useAuth();
  const [error, setError] = useState('');
  const [username, setUsername] = useState('');
  const [pageLoading, setPageLoading] = useState(true);

  useEffect(() => {
    if (!loading && !user) {
      router.push('/auth/login');
      return;
    }

    if (!loading && user) {
      setPageLoading(false);
    }
    
    const uniqueUsername = generateUsername("", 3, 15);
    setUsername(user?.user_metadata?.username || uniqueUsername);

  }, [user, loading, router]);

  const handleSubmit = async(e)=>{
    e.preventDefault();
    try {
      setError('');
      const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/users/${user?.id}`, {
        method: 'PUT',
        body: JSON.stringify({username}),
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${session.access_token}`,
        }
      });
      const { error: updateError } = await res.json();
      
      if (updateError){
        if(updateError?.message?.includes('duplicate key')){
          setError('That username is unavailable, please choose another.');
          return;
        } 
        throw updateError;
      }
      else updateUserMetadata({username});

      router.push('/auth/role-select');
    } catch (err: any) {
      setError(err.message);
    }
  }

  if (pageLoading || loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-xl">Loading...</div>
      </div>
    );
  }

  return (
    <div>
      <div>
        <h2 className="text-center text-3xl font-bold">Onboarding</h2>
        <h4>Set Username</h4>
        <p className="mt-2 text-center text-gray-600">
          This is a unique autogenerated username, You can modify it
        </p>
      </div>
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
          {error}
        </div>
      )}
      <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
        <div>
          <label htmlFor="username" className="sr-only">
            Username
          </label>
          <input
            id="username"
            name="username"
            type="text"
            required
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
            placeholder="Username"
          />
        </div>

        <div>
          <button
            type="submit"
            disabled={loading}
            className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {loading ? (
              'Redirecting'
            ) : (
              'Next'
            )}
          </button>
        </div>
      </form>
    </div>
  )
}

export default Onboarding