import React from 'react';
import { useEffect, useState } from 'react';
import Head from "next/head";

import { useRouter } from 'next/router';
import { useAuth } from '../../src/hooks/useAuth';
import { generateUsername } from 'unique-username-generator';

const Onboarding = () => {
  const router = useRouter();
  const { user, loading } = useAuth();
  const [error, setError] = useState('');
  const [username, setUsername] = useState('');
  const [pageLoading, setPageLoading] = useState(true);

  useEffect(() => {
    if (!loading && !user) {
      router.push('/auth/login');
      return;
    }

    if (!loading && user) {
      setPageLoading(false);
    }

    const uniqueUsername = generateUsername("", 3, 15);
    setUsername(user?.username || uniqueUsername);

  }, [user, loading, router]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      setError('');
      const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/users/${user?.id}/username`, {
        method: 'PATCH',
        body: JSON.stringify({ username }),
        headers: {
          'Content-Type': 'application/json',
        }
      });
      const { error: updateError } = await res.json();

      if (updateError) {
        if (updateError?.includes('duplicate key')) {
          setError('That username is unavailable, please choose another.');
          return;
        }
        throw updateError;
      }

      router.push('/auth/role-select');
    } catch (err: any) {
      setError(err);
    }
  }

  if (pageLoading || loading) {
    return (
      <div className="min-h-screen bg-black flex items-center justify-center text-white">
        <div className="animate-spin h-8 w-8 border-2 border-primary border-t-transparent rounded-full"></div>
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Onboarding</title>
        <meta name="description" content="Authentication system" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="min-h-screen flex flex-wrap items-center justify-center bg-black py-12 px-4 sm:px-6 lg:px-8">

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
            {error}
          </div>
        )}
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-white">Onboarding</h2>
          
          <p className="mt-2 text-center text-sm text-white-200">
            Set Username
          </p>
          <div className='m-0'>
            <label htmlFor="username" className="sr-only">
              Username
            </label>
            <input
              id="username"
              name="username"
              type="text"
              required
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="bg-[#1E1E1E] rounded-md shadow-sm px-5 py-3 text-sm border-2 border-solid border-[#444444] w-full focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 text-white mb-0"
              placeholder="Username"
            />
          </div>
          <p className="mt-1 text-center text-white-200 text-sm">
            This is a unique autogenerated username, You can modify it
          </p>
          <div>
            <button
              type="submit"
              disabled={loading}
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? (
                'Redirecting'
              ) : (
                'Next'
              )}
            </button>
          </div>
        </form>
      </div>
    </>
  )
}

export default Onboarding